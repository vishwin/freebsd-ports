--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/backend/shared/keyboard.rs.orig	2022-08-22 14:59:41.904511000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/backend/shared/keyboard.rs	2022-08-22 15:00:38.861126000 +0200
@@ -20,7 +20,7 @@ use keyboard_types::{Code, Location};
 #[cfg(any(
     all(
         any(feature = "x11", feature = "wayland"),
-        any(target_os = "linux", target_os = "openbsd")
+        any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")
     ),
     target_os = "macos"
 ))]
@@ -57,7 +57,7 @@ pub fn code_to_location(code: Code) -> Location {
     }
 }
 
-#[cfg(any(target_os = "linux", target_os = "openbsd"))]
+#[cfg(any(target_os = "freebsd", target_os = "linux", target_os = "openbsd"))]
 /// Map hardware keycode to code.
 ///
 /// In theory, the hardware keycode is device dependent, but in
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/backend/shared/mod.rs.orig	2022-08-22 14:59:41.906063000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/backend/shared/mod.rs	2022-08-22 15:00:56.908906000 +0200
@@ -15,7 +15,7 @@ cfg_if::cfg_if! {
 //! Logic that is shared by more than one backend.
 
 cfg_if::cfg_if! {
-    if #[cfg(any(target_os = "macos", target_os = "linux", target_os = "openbsd"))] {
+    if #[cfg(any(target_os = "freebsd", target_os = "macos", target_os = "linux", target_os = "openbsd"))] {
         mod keyboard;
         pub use keyboard::*;
     }
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/backend/mod.rs.orig	2022-08-22 14:59:41.907594000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/backend/mod.rs	2022-08-22 15:01:57.581204000 +0200
@@ -28,36 +28,36 @@ pub(crate) mod shared;
 #[cfg(target_os = "macos")]
 pub(crate) mod shared;
 
-#[cfg(all(feature = "x11", any(target_os = "linux", target_os = "openbsd")))]
+#[cfg(all(feature = "x11", any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")))]
 mod x11;
-#[cfg(all(feature = "x11", any(target_os = "linux", target_os = "openbsd")))]
+#[cfg(all(feature = "x11", any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")))]
 pub use x11::*;
-#[cfg(all(feature = "x11", any(target_os = "linux", target_os = "openbsd")))]
+#[cfg(all(feature = "x11", any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")))]
 pub(crate) mod shared;
 
-#[cfg(all(feature = "wayland", any(target_os = "linux", target_os = "openbsd")))]
+#[cfg(all(feature = "wayland", any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")))]
 mod wayland;
-#[cfg(all(feature = "wayland", any(target_os = "linux", target_os = "openbsd")))]
+#[cfg(all(feature = "wayland", any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")))]
 pub use wayland::*;
-#[cfg(all(feature = "wayland", any(target_os = "linux", target_os = "openbsd")))]
+#[cfg(all(feature = "wayland", any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")))]
 pub(crate) mod shared;
 
 #[cfg(all(
     not(feature = "x11"),
     not(feature = "wayland"),
-    any(target_os = "linux", target_os = "openbsd")
+    any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")
 ))]
 mod gtk;
 #[cfg(all(
     not(feature = "x11"),
     not(feature = "wayland"),
-    any(target_os = "linux", target_os = "openbsd")
+    any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")
 ))]
 pub use self::gtk::*;
 #[cfg(all(
     not(feature = "x11"),
     not(feature = "wayland"),
-    any(target_os = "linux", target_os = "openbsd")
+    any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")
 ))]
 pub(crate) mod shared;
 
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/dialog.rs.orig	2022-08-22 14:59:41.909107000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/dialog.rs	2022-08-22 15:02:20.045602000 +0200
@@ -38,7 +38,7 @@ pub struct FileInfo {
 
 /// Type of file dialog.
 #[cfg(not(any(
-    all(feature = "x11", any(target_os = "linux", target_os = "openbsd")),
+    all(feature = "x11", any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")),
     feature = "wayland"
 )))]
 #[derive(Clone, Copy, PartialEq)]
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/lib.rs.orig	2022-08-22 14:59:41.910601000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/lib.rs	2022-08-22 15:02:41.085484000 +0200
@@ -38,7 +38,7 @@
 // Rename `gtk_rs` back to `gtk`.
 // This allows us to use `gtk` as the feature name.
 // The `target_os` requirement is there to exclude anything `wasm` like.
-#[cfg(all(any(target_os = "linux", target_os = "openbsd"), feature = "gtk"))]
+#[cfg(all(any(target_os = "freebsd", target_os = "linux", target_os = "openbsd"), feature = "gtk"))]
 extern crate gtk_rs as gtk;
 
 // Reexport the version of `image` we are using.
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/clipboard.rs.orig	2022-08-22 14:59:41.912090000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/clipboard.rs	2022-08-22 15:00:06.556769000 +0200
@@ -226,7 +226,7 @@ cfg_if::cfg_if! {
     } else {
         impl ClipboardFormat {
             cfg_if::cfg_if! {
-                if #[cfg(any(target_os = "linux", target_os = "openbsd"))] {
+                if #[cfg(any(target_os = "freebsd", target_os = "linux", target_os = "openbsd"))] {
                     // trial and error; this is the most supported string type for gtk?
                     pub const TEXT: &'static str = "UTF8_STRING";
                 } else {
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/platform/mod.rs.orig	2022-08-22 14:59:41.913493000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/src/platform/mod.rs	2022-08-22 15:03:00.893578000 +0200
@@ -14,7 +14,7 @@
 
 //! Platorm specific extensions.
 
-#[cfg(any(doc, any(target_os = "linux", target_os = "openbsd")))]
+#[cfg(any(doc, any(target_os = "freebsd", target_os = "linux", target_os = "openbsd")))]
 pub mod linux;
 
 #[cfg(any(doc, target_os = "macos"))]
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/Cargo.toml.orig	2022-08-22 14:59:41.915001000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/Cargo.toml	2022-08-22 15:03:23.037710000 +0200
@@ -101,7 +101,7 @@ cgl = "0.3"
 bitflags = "1.2.1"
 cgl = "0.3"
 
-[target.'cfg(any(target_os="linux", target_os="openbsd"))'.dependencies]
+[target.'cfg(any(target_os = "freebsd", target_os="linux", target_os="openbsd"))'.dependencies]
 gl_loader = "0.1.2"
 ashpd = { version = "0.3.0", optional = true }
 # TODO(x11/dependencies): only use feature "xcb" if using X11
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/build.rs.orig	2022-08-22 14:59:41.916305000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid-shell/build.rs	2022-08-22 15:04:05.021937000 +0200
@@ -7,7 +7,8 @@ fn main() {
     use std::env;
     use std::path::PathBuf;
 
-    if env::var("CARGO_CFG_TARGET_OS").unwrap() != "linux"
+    if env::var("CARGO_CFG_TARGET_OS").unwrap() != "freebsd"
+        && env::var("CARGO_CFG_TARGET_OS").unwrap() != "linux"
         && env::var("CARGO_CFG_TARGET_OS").unwrap() != "openbsd"
     {
         return;
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/src/widget/textbox.rs.orig	2022-08-22 14:59:41.917875000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/src/widget/textbox.rs	2022-08-22 15:04:22.638401000 +0200
@@ -34,6 +34,7 @@ const MAC_OR_LINUX_OR_OBSD: bool = cfg!(any(
 
 const CURSOR_BLINK_DURATION: Duration = Duration::from_millis(500);
 const MAC_OR_LINUX_OR_OBSD: bool = cfg!(any(
+    target_os = "freebsd",
     target_os = "macos",
     target_os = "linux",
     target_os = "openbsd"
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/src/menu/mod.rs.orig	2022-08-22 14:59:41.919526000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/src/menu/mod.rs	2022-08-22 15:04:44.110525000 +0200
@@ -170,7 +170,7 @@ impl<T: Data> MenuManager<T> {
         #[cfg(target_os = "macos")]
         return Some(MenuManager::new(|_, _, _| sys::mac::application::default()));
 
-        #[cfg(any(target_os = "windows", target_os = "linux", target_os = "openbsd"))]
+        #[cfg(any(target_os = "windows", target_os = "freebsd", target_os = "linux", target_os = "openbsd"))]
         return None;
 
         // we want to explicitly handle all platforms; log if a platform is missing.
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/examples/markdown_preview.rs.orig	2022-08-22 14:59:41.920963000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/examples/markdown_preview.rs	2022-08-22 15:05:24.670324000 +0200
@@ -239,7 +239,7 @@ fn make_menu<T: Data>(_window_id: Option<WindowId>, _a
     {
         base = base.entry(druid::platform_menus::mac::application::default())
     }
-    #[cfg(any(target_os = "windows", target_os = "linux", target_os = "openbsd"))]
+    #[cfg(any(target_os = "windows", target_os = "freebsd", target_os = "linux", target_os = "openbsd"))]
     {
         base = base.entry(druid::platform_menus::win::file::default());
     }
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/examples/textbox.rs.orig	2022-08-22 14:59:41.922304000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/examples/textbox.rs	2022-08-22 15:05:03.838164000 +0200
@@ -98,7 +98,7 @@ fn make_menu<T: Data>(_window: Option<WindowId>, _data
     {
         base = base.entry(druid::platform_menus::mac::application::default())
     }
-    #[cfg(any(target_os = "windows", target_os = "linux", target_os = "openbsd"))]
+    #[cfg(any(target_os = "windows", target_os = "freebsd", target_os = "linux", target_os = "openbsd"))]
     {
         base = base.entry(druid::platform_menus::win::file::default());
     }
--- ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/examples/multiwin.rs.orig	2022-08-22 14:59:41.923677000 +0200
+++ ../druid-85d503a79df7581d1a144f97ee1cc369788b55b8/druid/examples/multiwin.rs	2022-08-22 15:05:14.078523000 +0200
@@ -200,7 +200,7 @@ fn make_menu(_: Option<WindowId>, state: &State, _: &E
     {
         base = druid::platform_menus::mac::menu_bar();
     }
-    #[cfg(any(target_os = "windows", target_os = "linux", target_os = "openbsd"))]
+    #[cfg(any(target_os = "windows", target_os = "freebsd", target_os = "linux", target_os = "openbsd"))]
     {
         base = base.entry(druid::platform_menus::win::file::default());
     }
